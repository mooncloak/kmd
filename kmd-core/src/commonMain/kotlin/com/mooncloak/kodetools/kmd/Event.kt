package com.mooncloak.kodetools.kmd

/**
 * Represents a sealed interface for different types of events in the Kmd library.
 *
 * The `Event` interface groups various related event types, such as commands, inputs,
 * outputs, and results, within a unified hierarchy. Each type of event encapsulates
 * specific data relevant to its purpose in the context of command execution and process handling.
 *
 * Event Types:
 * - `Command`: Encapsulates a [com.mooncloak.kodetools.kmd.Command] to be executed.
 * - `Input`: Encapsulates an input [String] to be passed to a process.
 * - `Output`: Represents the output of a process, encapsulated in a [ProcessOutput] object.
 * - `Result`: Represents the result of a command execution, encapsulated in a [CommandResult] object.
 */
@ExperimentalKmdApi
public sealed interface Event {

    /**
     * Represents a command event encapsulating a [com.mooncloak.kodetools.kmd.Command] instance.
     *
     * This event is a type of [Event] designed specifically to carry command-related data,
     * facilitating execution or processing within the overall event-handling infrastructure.
     *
     * @property [command] The encapsulated [com.mooncloak.kodetools.kmd.Command] instance, representing
     * the command to be executed, including its arguments, output handlers, and execution context.
     */
    public data class Command public constructor(
        public val command: com.mooncloak.kodetools.kmd.Command
    ) : Event

    /**
     * Represents an event that encapsulates input to be passed to a process.
     *
     * The [Input] class is a subtype of the [Event] interface, used within the context
     * of command execution and process handling. It provides a mechanism to represent
     * and handle string-based input that can be fed into processes running in the Kmd library.
     *
     * @property [input] The string value representing the input to be passed to a process.
     */
    public data class Input public constructor(
        public val input: String
    ) : Event

    /**
     * Represents an event where process output is captured and handled.
     *
     * This class is a data structure that encapsulates a [ProcessOutput] object and serves as
     * an event implementation conforming to the [Event] interface. It is designed to convey information
     * about the output generated by a running process, such as standard output or error streams.
     *
     * @property [output] The [ProcessOutput] instance containing details about the process output,
     * including its type, total captured lines, and differential output.
     */
    public data class Output public constructor(
        public val output: ProcessOutput
    ) : Event

    /**
     * Represents a result event which encapsulates the outcome of a command execution.
     *
     * This data class provides a structured format for handling an instance of [CommandResult],
     * which contains detailed information about the executed command, its arguments, and the
     * associated exit code. It implements the `Event` interface, making it suitable for use
     * in event-driven systems or frameworks.
     *
     * @property [result] The result of the command execution represented as a [CommandResult].
     */
    public data class Result public constructor(
        public val result: CommandResult
    ) : Event
}
